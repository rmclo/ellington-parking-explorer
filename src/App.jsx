import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import Popup from 'reactjs-popup'

import './App.css'
import 'reactjs-popup/dist/index.css'

export default function App() {
	return (
		<>
		<div className="page-title"><h1>Ellington Parking Explorer</h1></div>
		<div>
			<Garage />
		</div>
		</>
	);
}

function Space({levelData, levelID}) {
	const spaceNumber = levelData.get(levelID);
	if (spaceNumber === undefined) {
		return (
			<div className={`${levelID} fixed cell`} />
		);
	}
	else {
		let position = '';
		switch (levelID.charAt(0)) {
			case 'n':
				position = 'bottom center';
				break;
			case 'w':
				position = 'right center';
				break;
			case 'e':
				position = 'left center';
				break;
			case 's':
				position = 'top center';
				break;
			case 'c':
				position = 'right center';
				break;
		}

		return (
			<Popup trigger={open => (
				<button className={`${levelID} cell`}>{spaceNumber}</button>
				)}
				position={position}
				on={['hover', 'focus']}
				arrow='true'
				closeOnDocumentClick
			>
				<div className="parking-space-popup">
					{getParkingSpaceInfo(spaceNumber)}
				</div>
			</Popup>
		);
	}
}

function getParkingSpaceInfo(spaceNumber) {
	const spaceOwnership = new Map([
		['1', '701'], ['2', '701'], ['3', '1211'], ['4', '1211'], ['5', '317'], ['6', '219'], ['7', '406'], ['8', '406'],
		['9', '919'], ['10', '301'], ['11', '201'], ['12', '1101'], ['13', '1101'], ['14', '1201'], ['15', '1201'],
		['16', '1106'], ['17', '1109'], ['18', '1109'], ['19', '307'], ['20', '409'], ['21', '409'], ['22', '218'],
		['23', '101'], ['24', '811'], ['26', '618'], ['27', '301'], ['28', '813'], ['29', '1202'], ['30', '1009'],
		['31', '1102'], ['32', '1206'], ['33', '1212'], ['34', '705'], ['35', '504'], ['36', '806'], ['37', '404'],
		['38', '702'], ['39', '703'], ['40', '713'], ['41', '712'], ['42', '313'], ['43', '413'], ['44', '513'], ['46', '917'],
		['47', '704'], ['48', '604'], ['49', '202'], ['50', '903'], ['51', '603'], ['52', '802'], ['53', '905'],
		['54', '805'], ['55', '617'], ['56', '817'], ['57', '717'], ['58', '613'], ['59', '516'], ['60', '217'],
		['61', '1219'], ['62', '1219'], ['63', '1219'], ['64', '216'], ['65', '615'], ['66', '616'], ['67', '718'],
		['68', '611'], ['69', '611'], ['70', '211'], ['71', '1116'], ['74', '719'], ['75', '719'], ['76', '1119'],
		['77', '1119'], ['78', '1216'], ['79', '911'], ['80', '911'], ['81', '1111'], ['82', '1111'], ['83', '1208'],
		['84', '501'], ['85', '401'], ['86', '401'], ['87', '1209'], ['88', '1209'], ['89', '709'], ['90', '709'],
		['91', '901'], ['92', '901'], ['93', '801'], ['94', '801'], ['95', '306'], ['96', '1208'], ['97', '309'],
		['98', '609'], ['99', '601'], ['100', '208'], ['101', '706'], ['102', '405'], ['103', '517'], ['104', '1115'],
		['105', '306'], ['106', '1017'], ['107', '1108'], ['108', '1108'], ['109', '809'], ['110', '809'], ['111', '407'],
		['112', '906'], ['113', '203'], ['114', '209'], ['115', '209'], ['116', '304'], ['117', '602'], ['118', '503'],
		['119', '314'], ['120', '414'], ['121', '1104'], ['122', '715'], ['123', '412'], ['124', '102'], ['125', '1104'],
		['126', '819'], ['127', '909'], ['128', '909'], ['129', '509'], ['130', '509'], ['131', '305'], ['132', '607'],
		['133', '608'], ['134', '502'], ['135', '213'], ['136', '512'], ['137', '915'], ['138', '1015'], ['139', '814'],
		['140', '812'], ['141', '319'], ['142', '914'], ['143', '416'], ['144', '1011'], ['145', '1011'], ['146', '1019'],
		['147', '1019'], ['148', '511'], ['149', '811'], ['150', '711'], ['151', '711'], ['152', '113'], ['153', '113'],
		['154', '1013'], ['155', '411'], ['156', '411'], ['157', '1217'], ['158', '419'], ['159', '419'], ['160', '1218'],
		['161', '519'], ['162', '519'], ['163', '1117'], ['164', '1006'], ['165', '606'], ['166', '605'], ['167', '303'],
		['168', '206'], ['169', '904'], ['170', '606'], ['171', '506'], ['172', '619'], ['173', '619'], ['174', '1207'],
		['175', '1203'], ['176', '1004'], ['177', '1017'], ['178', '1001'], ['179', '1008'], ['180', '1007'], ['181', '908'],
		['182', '907'], ['183', '808'], ['184', '807'], ['185', '1113'], ['186', '417'], ['187', '316'], ['188', '819'],
		['189', '511'], ['190', '803'], ['191', '804'], ['192', '1005'], ['193', '1205'], ['194', '205'], ['195', '1003'],
		['196', '505'], ['197', '402'], ['198', '1002'], ['199', '902'], ['200', '403'], ['201', '302'], ['202', '318'],
		['203', '318'], ['204', '1115'], ['205', '1017'], ['206', '215'], ['207', '207'], ['208', '507'], ['209', '708'],
		['210', '707'], ['211', '508'], ['212', '408'], ['213', '308'], ['214', '204'], ['215', 'A'], ['216', 'A'],
		['217', 'B'], ['218', 'B'], ['219', '315'], ['220', '612'], ['221', '418'], ['222', '415'], ['223', '515'],
		['224', '815'], ['225', '1014'], ['226', '1114'], ['227', '1018'], ['228', '514'], ['229', '614'], ['230', '714'],
		['231', '916'], ['232', '716'], ['233', '816'], ['234', '518'], ['235', '1212'], ['236', '913'], ['237', '917'],
		['238', '214'], ['239', '1204'], ['240', '311'], ['241', '319'], ['242', '818'], ['243', '1215'], ['244', '912'],
		['245', '1118'], ['246', '1214'], ['247', '114'], ['248', '112'], ['249', '918'], ['250', '1012'], ['251', '111'],
		['252', '1112'], ['253', '1213'], ['254', '212'], ['255', '312'], ['256', '202'], ['257', '1103'],
	]);

	const owner = spaceOwnership.get(''+ spaceNumber) || 'UNASSIGNED';
	return (
		<>
			<div>Owned by {owner}</div>
		</>
	);
}

function Garage() {
	const [currentLevel, setCurrentLevel] = useState('C');

	const levelMapping = new Map([
		['B', new Map([
			['e4', 1], ['e5', 2], ['e6', 3], ['e7', 4], ['e8', 5], ['e10', 6], ['e11', 7], ['e12', 8],
			['e13', 9], ['e14', 10], ['e16', 11], ['e17', 12], ['e18', 13], ['e19', 14], ['e20', 15],
			['e21', 16], ['e22', 17], ['e23', 18],
			['s6', 19], ['s5', 20], ['s4', 21], ['s3', 22], ['s2', 23], ['s1', 24],
			['c2', 44], ['c3', 43], ['c4', 25], ['c5', 42], ['c6', 26], ['c7', 41], ['c8', 27], ['c9', 40],
			['c10', 28], ['c11', 39], ['c12', 29], ['c13', 38], ['c14', 30], ['c15', 37], ['c16', 31],
			['c17', 36], ['c18', 32], ['c19', 35], ['c20', 33], ['c21', 34],
			['w21', 45], ['w20', 46], ['w17', 47], ['w16', 48], ['w15', 49], ['w14', 50], ['w13', 51],
			['w12', 52], ['w11', 53], ['w10', 54], ['w9', 55], ['w8', 56], ['w7', 57], ['w6', 58],
			['w5', 59], ['w4', 60], ['w3', 61], ['w2', 62], ['w1', 63],
		])],
		['C', new Map([
			['n1', 64], ['n2', 65], ['n3', 66], ['n4', 67], ['n5', 68], ['n6', 69], ['n7', 70], ['n8', 71], ['n9', 72],
			['e1', 73], ['e2', 74], ['e3', 75], ['e4', 76], ['e5', 77], ['e6', 78], ['e7', 79], ['e8', 80],
			['e9', 81], ['e10', 82], ['e11', 83], ['e12', 84], ['e13', 85], ['e14', 86], ['e15', 87],
			['e16', 88], ['e17', 89], ['e18', 90], ['e19', 91], ['e20', 92], ['e21', 93], ['e22', 94],
			['e23', 95],
			['s9', 96], ['s8', 97], ['s7', 98], ['s6', 99], ['s5', 100], ['s4', 101], ['s3', 102],
			['c2', 123], ['c3', 122], ['c4', 103], ['c5', 121], ['c6', 104], ['c7', 120], ['c8', 105],
			['c9', 119], ['c10', 106], ['c11', 118], ['c12', 107], ['c13', 117], ['c14', 108],
			['c15', 116], ['c16', 109], ['c17', 115], ['c18', 110], ['c19', 114], ['c20', 111],
			['c21', 113], ['c22', 112], ['w22', 124], ['w21', 125], ['w20', 126], ['w19', 127],
			['w18', 128], ['w17', 129], ['w16', 130], ['w15', 131], ['w14', 132], ['w13', 133],
			['w12', 134], ['w11', 135], ['w10', 136], ['w9', 137], ['w8', 138], ['w7', 139], ['w6', 140],
			['w5', 141], ['w4', 142], ['w3', 143], ['w2', 144], ['w1', 145],
		])],
		['D', new Map([
			['n1', 146], ['n2', 147], ['n3', 148], ['n4', 149], ['n5', 150], ['n6', 151], ['n7', 152],
			['n8', 153], ['n9', 154],
			['e1', 155], ['e2', 156], ['e3', 157], ['e4', 158], ['e5', 159], ['e6', 160], ['e7', 161],
			['e8', 162], ['e9', 163], ['e10', 164], ['e11', 165], ['e12', 166], ['e13', 167],
			['e14', 168], ['e15', 169], ['e16', 170], ['e17', 171], ['e18', 172], ['e19', 91],
			['e20', 174], ['e21', 175], ['e22', 176], ['e23', 177],
			['s9', 178], ['s8', 179], ['s7', 180], ['s6', 181], ['s5', 182], ['s4', 183], ['s3', 184],
			['c1', 185], ['c2', 206], ['c3', 205], ['c4', 186], ['c5', 204], ['c6', 187], ['c7', 203],
			['c8', 188], ['c9', 202], ['c10', 189], ['c11', 201], ['c12', 190], ['c13', 200], ['c14', 191],
			['c15', 199], ['c16', 192], ['c17', 198], ['c18', 193], ['c19', 197], ['c20', 194],
			['c21', 196], ['c22', 195],
			['w21', 207], ['w20', 208], ['w19', 209], ['w18', 210], ['w17', 211], ['w16', 212],
			['w15', 213], ['w14', 214], ['w13', 215], ['w12', 216], ['w11', 217], ['w10', 218], 
			['w9', 219], ['w8', 220], ['w7', 221], ['w6', 222], ['w5', 223], ['w4', 224], ['w3', 225],
			['w2', 226], ['w1', 227],
		])],
		['E', new Map([
			['n1', 228], ['n2', 229], ['n3', 230], ['n4', 231], ['n5', 232], ['n6', 233], ['n7', 234],
			['n8', 235], ['n9', 236],
			['e1', 237], ['e2', 238], ['e3', 239], ['e4', 240], ['e5', 241], ['e6', 242], ['e7', 243],
			['e8', 244], ['e9', 245], ['e10', 246], ['e11', 247], ['e12', 248], ['e13', 249],
			['e14', 250],
			['c4', 251], ['c6', 252], ['c8', 253], ['c10', 254], ['c12', 255], ['c14', 256],
			['c16', 257],
		])]
	]);

	const elements = [
		['w', 22], ['e', 23], ['c', 22], ['n', 9], ['s', 9], ['pillar', 24]
	];

	const elementObjects = [];
	elements.forEach( (element) => {
		const prefix = element[0];
		const number = element[1];
		for ( let i=1; i<=number; i++ ) {
			let obj;

			if (prefix == 'pillar') {
				obj = <div className={`${prefix}${i} pillar cell`} />;
			}
			else {
				obj = <Space levelData={levelMapping.get(currentLevel)} levelID={`${prefix}${i}`} />;
			}
			elementObjects.push(obj);
		}
	});

	return (
		<>
		<div className="level-selector">
			<div style={{margin: "10px"}}>
				<button onClick={() => SwitchLevel(-1)}>&lt;&nbsp;Previous</button>
			</div>
			<h2>Level {currentLevel}</h2>
			<div style={{margin: "10px"}}>
				<button onClick={() => SwitchLevel(1)}>Next&nbsp;&gt;</button>
			</div>
		</div>
		<div className="explorer-app">
			<div className="garage-floor">
				<div className="north-elevator fixed cell">North Elevator Lobby</div>
				<div className="south-elevator fixed cell">South Elevator Lobby</div>
				<div className="north-elevator-empty fixed cell" />
				<div className="south-elevator-empty fixed cell" />
				<div className="nw-block fixed cell" />
				<div className="ne-block fixed cell" />
				<div className="sw-block fixed cell" />
				<div className="se-block fixed cell" />
				<div className="west-empty fixed cell" />
				{elementObjects}
			</div>
		</div>
		</>
	);

	function SwitchLevel(value) {
		let levelMapping = ['B', 'C', 'D', 'E'];
		let currentLevelIndex = ['B', 'C', 'D', 'E'].indexOf(currentLevel);

		setCurrentLevel(levelMapping[mod((currentLevelIndex + value), 4)]);
	}

	function mod(n, m) {
		return ((n % m) + m) % m;
	}
}


